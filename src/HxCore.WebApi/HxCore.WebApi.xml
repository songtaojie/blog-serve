<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HxCore.WebApi</name>
    </assembly>
    <members>
        <member name="T:HxCore.Extensions.Authentication.CustomJwtDataFormat">
            <summary>
            validate jwt in cookie
            </summary>
        </member>
        <member name="M:HxCore.Extensions.Authentication.CustomJwtDataFormat.#ctor(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            自定义类型
            </summary>
            <param name="algorithm"></param>
            <param name="validationParameters"></param>
        </member>
        <member name="M:HxCore.Extensions.Authentication.CustomJwtDataFormat.Unprotect(System.String)">
            <summary>
            
            </summary>
            <param name="protectedText"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Extensions.Authentication.CustomJwtDataFormat.Unprotect(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="protectedText"></param>
            <param name="purpose"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Extensions.Authentication.CustomJwtDataFormat.Protect(Microsoft.AspNetCore.Authentication.AuthenticationTicket)">
            <summary>
            This ISecureDataFormat implementation is decode-only
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Extensions.Authentication.CustomJwtDataFormat.Protect(Microsoft.AspNetCore.Authentication.AuthenticationTicket,System.String)">
            <summary>
            This ISecureDataFormat implementation is decode-only
            </summary>
            <param name="data"></param>
            <param name="purpose"></param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Extensions.Authentication.JwtHelper">
            <summary>
            jwt的帮助类
            </summary>
        </member>
        <member name="M:HxCore.Extensions.Authentication.JwtHelper.BuildJwtToken(HxCore.Extensions.Authentication.JwtModel)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="model">模型</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Extensions.Authentication.JwtHelper.SerializeJwt(System.String)">
            <summary>
            序列化jwt字符串
            </summary>
            <param name="jwtStr">jwt字符串</param>
            <returns>序列化后的jwt实体类</returns>
        </member>
        <member name="T:HxCore.Extensions.Authentication.JwtSettings">
            <summary>
            jwt的配置
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtSettings.Issuer">
            <summary>
            谁颁发的jwt
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtSettings.Audience">
            <summary>
            谁使用这个jwt
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtSettings.SecretKey">
            <summary>
            secret是保存在服务器端的，jwt的前发声明也是在服务器端的，secret就是用来进行jwt的
            签发和jwt的验证，所以他就是你服务器端的私钥，在任何场景都不应该流露出去。
            一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了
            通过jwt header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtSettings.AllowRoutes">
            <summary>
            允许的路由
            </summary>
        </member>
        <member name="T:HxCore.Extensions.Authentication.JwtModel">
            <summary>
            jwt的模型
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtModel.UserId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtModel.UserName">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtModel.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtModel.IsSuperAdmin">
             <summary>
            是否是管理员
             </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtModel.Role">
            <summary>
            角色Code
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtModel.RoleId">
            <summary>
            角色Id
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.JwtModel.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="T:HxCore.Extensions.Authentication.JwtToken">
            <summary>
            JwtToken
            </summary>
        </member>
        <member name="M:HxCore.Extensions.Authentication.JwtToken.BuildJwtToken(System.Collections.Generic.List{System.Security.Claims.Claim},HxCore.Extensions.Authentication.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="model">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Extensions.Authentication.MyJwtBearerHandler">
            <summary>
            jwt处理程序
            </summary>
        </member>
        <member name="M:HxCore.Extensions.Authentication.MyJwtBearerHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
            <param name="logger"></param>
            <param name="encoder"></param>
            <param name="clock"></param>
        </member>
        <member name="M:HxCore.Extensions.Authentication.MyJwtBearerHandler.HandleAuthenticateAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.Extensions.Authentication.MyJwtBearerHandler.HandleChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            如果有问题的身份验证方案将身份验证交互作为其请求流的一部分来处理，则重写此方法以处理401个挑战问题。
            (比如添加一个响应标头，或者将登录页面或外部登录位置的401结果更改为302。)
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Extensions.Authentication.MyJwtBearerHandler.HandleForbiddenAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties)">
            <summary>
            处理重定向
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Extensions.Authentication.MyJwtSecurityTokenHandler">
            <summary>
            token处理
            </summary>
        </member>
        <member name="M:HxCore.Extensions.Authentication.MyJwtSecurityTokenHandler.#ctor(Hx.Sdk.Cache.IRedisCache)">
            <summary>
            构造函数
            </summary>
            <param name="redisCache"></param>
        </member>
        <member name="M:HxCore.Extensions.Authentication.MyJwtSecurityTokenHandler.ValidateLifetime(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            验证过期处理
            </summary>
            <param name="notBefore"></param>
            <param name="expires"></param>
            <param name="jwtToken"></param>
            <param name="validationParameters"></param>
        </member>
        <member name="T:HxCore.Extensions.Authentication.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="M:HxCore.Extensions.Authentication.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
        </member>
        <member name="M:HxCore.Extensions.Authentication.PermissionHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,HxCore.Extensions.Authentication.PermissionRequirement)">
            <summary>
            // 重载异步处理程序
            </summary>
            <param name="context">上下文</param>
            <param name="requirement">对象</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Extensions.Authentication.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionRequirement.Roles">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:HxCore.Extensions.Authentication.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:HxCore.Extensions.Authentication.PermissionRequirement.#ctor(System.String,System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="T:HxCore.Extensions.Middlewares.JwtAuthenticationMiddleware">
            <summary>
            jwt中间件
            </summary>
        </member>
        <member name="M:HxCore.Extensions.Middlewares.JwtAuthenticationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next">下一个管道</param>
        </member>
        <member name="M:HxCore.Extensions.Middlewares.JwtAuthenticationMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Admin.BlogManageController">
            <summary>
            后台管理博客管理
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.BlogManageController.#ctor(HxCore.IServices.IBlogService)">
             <summary>
            构造函数
             </summary>
             <param name="blogService"></param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.BlogManageController.GetPage(HxCore.Model.Admin.Blog.BlogManageQueryParam)">
            <summary>
            获取博客列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.BlogManageController.GetTagList">
            <summary>
            获取博客个人标签列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.BlogManageController.Get(System.String)">
            <summary>
            获取博客详情
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.BlogManageController.Add(HxCore.Model.Admin.Blog.BlogManageCreateModel)">
            <summary>
            添加博客
            </summary>
            <param name="editInfo"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.BlogManageController.Update(HxCore.Model.Admin.Blog.BlogManageCreateModel)">
            <summary>
            博客编辑
            </summary>
            <param name="editInfo"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.BlogManageController.Delete(System.String)">
            <summary>
            博客删除
            </summary>
            <param name="id">要删除的博客的</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Admin.HomeController">
            <summary>
            主页
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.HomeController.#ctor(HxCore.IServices.Admin.IOperateLogService,HxCore.IServices.SignalR.IChatService)">
             <summary>
            构造函数
             </summary>
             <param name="logService"></param>
             <param name="chatService"></param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.HomeController.GetLineData2Async">
            <summary>
             获取用户近三十天接口访问情况
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.HomeController.GetLineDataAsync">
            <summary>
             获取用户近三十天接口访问情况
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.HomeController.GetLogsPageAsync(HxCore.Model.Admin.OperateLog.OperateLogQueryParam)">
            <summary>
            获取操作日志列表数据
            </summary>
            <param name="param">请求参数</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.HomeController.SendMessage">
            <summary>
            SignalR发送消息接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.HomeController.Get">
            <summary>
            测试接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.HomeController.GetUserName">
            <summary>
            获取cookie
            </summary>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Admin.ModuleController">
            <summary>
            接口api控制器
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.#ctor(HxCore.IServices.Admin.IModuleService,Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)">
             <summary>
            构造函数
             </summary>
             <param name="service"></param>
             <param name="actionProvider"></param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.GetPageAsync(HxCore.Model.Admin.Module.ModuleQueryParam)">
            <summary>
            获取接口分页列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.GetListAsync(HxCore.Model.Admin.Module.ModuleQueryParam)">
            <summary>
            获取接口列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.GetAsync(System.String)">
            <summary>
            获取接口详情数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.AddAsync(HxCore.Model.Admin.Module.ModuleCreateModel)">
            <summary>
            添加接口
            </summary>
            <param name="createModel"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.UpdateAsync(HxCore.Model.Admin.Module.ModuleUpdateModel)">
            <summary>
            编辑接口
            </summary>
            <param name="createModel"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.DeleteAsync(System.String)">
            <summary>
            删除接口
            </summary>
            <param name="id">要删除的接口的id</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.SyncInterface">
            <summary>
            同步接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.ModuleController.GetActionDescription">
            <summary>
            获取action的信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Admin.Oauth2Controller">
            <summary>
            账户授权相关的控制器类
            </summary>
        </member>
        <member name="F:HxCore.WebApi.Controllers.Admin.Oauth2Controller._userService">
            <summary>
            用户服务类
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.Oauth2Controller.#ctor(HxCore.IServices.Admin.IUserService,HxCore.IServices.Admin.IRoleService,Hx.Sdk.Cache.IRedisCache)">
            <summary>
            构造函数
            </summary>
            <param name="userService">用户</param>
            <param name="roleService">角色</param>
            <param name="redisCache">缓存</param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.Oauth2Controller.Authorize(HxCore.Model.ViewModels.LoginParam)">
            <summary>
            用户登录
            </summary>
            <param name="param">密码</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.Oauth2Controller.Logout">
            <summary>
            登出
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.Oauth2Controller.RefreshToken(System.String)">
            <summary>
            刷新token
            </summary>
            <param name="token">旧的token</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Admin.OperateLogController">
            <summary>
            操作日志的控制器
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.OperateLogController.#ctor(HxCore.IServices.Admin.IOperateLogService)">
             <summary>
            构造函数
             </summary>
             <param name="service"></param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.OperateLogController.GetPageAsync(HxCore.Model.Admin.OperateLog.OperateLogQueryParam)">
            <summary>
            获取操作日志列表数据
            </summary>
            <param name="param">请求参数</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Admin.PermissionController">
            <summary>
            菜单按钮权限控制器
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.PermissionController.#ctor(HxCore.IServices.Admin.IPermissionService)">
             <summary>
            构造函数
             </summary>
             <param name="service"></param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.PermissionController.GetList">
            <summary>
            获取菜单列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.PermissionController.GetRouters">
            <summary>
            获取路由树
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.PermissionController.GetUserMenuTree">
            <summary>
            获取菜单下拉树列表
            </summary>
            <returns></returns>
            <remarks>添加菜单时候的上级菜单下拉列表</remarks>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.PermissionController.Get(System.String)">
            <summary>
            获取菜单详情数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.PermissionController.Add(HxCore.Model.Admin.Menu.MenuCreateModel)">
            <summary>
            添加菜单/按钮
            </summary>
            <param name="createModel"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.PermissionController.Update(HxCore.Model.Admin.Menu.MenuUpdateModel)">
            <summary>
            编辑菜单/按钮
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.PermissionController.Delete(System.String)">
            <summary>
            删除菜单/按钮
            </summary>
            <param name="id">要删除的菜单/按钮的id</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Admin.RoleController">
            <summary>
            角色控制器
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.#ctor(HxCore.IServices.Admin.IRoleService,HxCore.IServices.Ids4.IIds4RoleService)">
             <summary>
            构造函数
             </summary>
             <param name="roleService">不使用IdentityServer4时的角色服务</param>
             <param name="ids4RoleService">使用IdentityServer时的角色服务</param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.GetPage(HxCore.Model.Admin.Role.RoleQueryParam)">
            <summary>
            获取角色分页列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.GetList">
            <summary>
            获取角色列表数据（用于下拉框选择角色）
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.Get(System.String)">
            <summary>
            获取角色详情数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.GetPermissions(System.String)">
            <summary>
            获取角色权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.Add(HxCore.Model.Admin.Role.RoleCreateModel)">
            <summary>
            添加角色
            </summary>
            <param name="createModel"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.Update(HxCore.Model.Admin.Role.RoleCreateModel)">
            <summary>
            编辑角色
            </summary>
            <param name="createModel"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.Delete(System.String)">
            <summary>
            删除角色
            </summary>
            <param name="id">要删除的接口的id</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.RoleController.AssignPermission(HxCore.Model.Admin.Role.AssignPermissionModel)">
            <summary>
            给角色分配权限
            </summary>
            <param name="model">用户提交的数据</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Admin.UserController">
            <summary>
            用户管理控制器
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.#ctor(HxCore.IServices.Admin.IUserService)">
             <summary>
            构造函数
             </summary>
             <param name="service"></param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.GetPageAsync(HxCore.Model.Admin.User.UserQueryParam)">
            <summary>
            获取用户分页列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.GetAsync(System.String)">
            <summary>
            获取用户详情数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.GetCurrentUserInfoAsync">
            <summary>
            获取用户详情数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.GetRoleByIdAsync(System.String)">
            <summary>
             获取用户所拥有的的角色信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.AddAsync(HxCore.Model.Admin.User.UserCreateModel)">
            <summary>
            添加用户
            </summary>
            <param name="createModel"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.UpdateAsync(HxCore.Model.Admin.User.UserUpdateModel)">
            <summary>
            编辑用户
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.UpdateMyInfoAsync(HxCore.Model.Admin.User.UserUpdateModel)">
            <summary>
            编辑自己的信息
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.DeleteAsync(System.String)">
            <summary>
            删除用户
            </summary>
            <param name="id">要删除的接口的id</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.ChangePwdAsync(HxCore.Model.Admin.User.ChangePwdModel)">
            <summary>
            管理员修改其他人密码
            </summary>
            <param name="model">用户提交的数据</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.ChangeMyPwdAsync(HxCore.Model.Admin.User.ChangeMyPwdModel)">
            <summary>
            用户修改自己的密码
            </summary>
            <param name="model">用户提交的数据</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.AssignRoleAsync(HxCore.Model.Admin.User.AssignRoleModel)">
            <summary>
            分配权限
            </summary>
            <param name="model">用户提交的数据</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.CheckUserNameAsync(System.String)">
            <summary>
            检查用户名
            </summary>
            <param name="userName">用户名</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.Admin.UserController.CheckEmailAsync(System.String)">
            <summary>
            检查邮箱
            </summary>
            <param name="email">邮箱</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.AttachController">
            <summary>
            附件控制器
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.AttachController.#ctor(Hx.Sdk.Core.IWebManager,Hx.Sdk.Core.IUserContext,Microsoft.Extensions.Options.IOptions{HxCore.Options.AttachSettingsOptions})">
            <summary>
            构造函数
            </summary>
            <param name="webManager"></param>
            <param name="userContext"></param>
            <param name="options">附件配置</param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.AttachController.Upload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            附件上传
            </summary>
            <param name="file">上传的文件</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.AttachController.GetMdTemplate">
            <summary>
            获取md编辑器的模板内容
            </summary>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Base.BaseAdminController">
            <summary>
            admin基础控制器
            </summary>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Base.BaseApiController">
            <summary>
            基础的api
            </summary>
        </member>
        <member name="T:HxCore.WebApi.Controllers.Base.BaseAuthApiController">
            <summary>
            客户端使用的api
            </summary>
        </member>
        <member name="T:HxCore.WebApi.Controllers.BlogController">
            <summary>
            博客相关的控制器类
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.BlogController.#ctor(HxCore.IServices.IBlogService)">
             <summary>
            构造函数
             </summary>
             <param name="blogService"></param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.BlogController.GetPageAsync(HxCore.Model.BlogQueryParam)">
            <summary>
            获取博客列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.BlogController.FindById(System.String)">
            <summary>
            根据博客id获取博客信息
            </summary>
            <param name="id">博客id</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.EnumController">
            <summary>
            枚举的控制器
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.EnumController.#ctor(Hx.Sdk.DatabaseAccessor.IRepository{HxCore.Entity.Entities.T_BlogType})">
            <summary>
            构造函数
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:HxCore.WebApi.Controllers.EnumController.GetBlogTypeList">
            <summary>
            获取博客类型的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.EnumController.GetCategoryList">
            <summary>
            获取博客类型的列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.HealthCheckController">
            <summary>
            健康检查
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.HealthCheckController.#ctor(Microsoft.Extensions.Logging.ILogger{HxCore.WebApi.Controllers.HealthCheckController})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.HealthCheckController.Get">
            <summary>
            健康检查接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.WebApi.Controllers.HealthCheckController.GetLog">
            <summary>
            elk日志测试
            </summary>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Controllers.TestController">
            <summary>
            测试控制器
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Controllers.TestController.#ctor(Hx.Sdk.EventBus.IEventBus)">
            <summary>
            控制器
            </summary>
            <param name="eventBus"></param>
        </member>
        <member name="T:HxCore.WebApi.Document.DocumentHelper">
            <summary>
            注释帮助类
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Document.DocumentHelper.GetActionDescription(System.String,Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)">
            <summary>
            获取控制器action的信息
            </summary>
            <param name="path"></param>
            <param name="actionDescriptor"></param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Program">
            <summary>
            主程序
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Program.Main(System.String[])">
            <summary>
            主函数
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="M:HxCore.WebApi.Program.CreateHostBuilder(System.String[])">
            <summary>
            创建Host
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:HxCore.WebApi.Startup">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:HxCore.WebApi.Startup.#ctor(Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造函数
            </summary>
            <param name="_env">环境</param>
            <param name="configuration">配置</param>
        </member>
        <member name="M:HxCore.WebApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:HxCore.WebApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
            配置
            </summary>
            <param name="app"></param>
            <param name="lifetime"></param>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions">
            <summary>
            授权处理上下文拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions.GetCurrentHttpContext(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            获取当前 HttpContext 上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.RouteAuthorizationHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.RouteAuthorizationHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.RouteAuthorizationHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Hx.Sdk.Core.IUserContext,HxCore.IServices.Admin.IPermissionService)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="userContext"></param>
            <param name="service"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.RouteAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Authorization.Infrastructure.RouteAuthorizationRequirement)">
            <summary>
            重写异步处理程序
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.RouteAuthorizationHandler.FixRoute(System.String)">
            <summary>
            修复路由
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.Infrastructure.RouteAuthorizationRequirement">
            <summary>
            路由相关的授权策略
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.Infrastructure.RouteAuthorizationRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.Infrastructure.RouteAuthorizationRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.Infrastructure.RouteAuthorizationRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.Infrastructure.RouteAuthorizationRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Authorization.Infrastructure.RouteAuthorizationRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.Infrastructure.RouteAuthorizationRequirement.#ctor(System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.AuthenticationAppBuilderExtensions">
            <summary>
            授权中间件
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.AuthenticationAppBuilderExtensions.UseJwtAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用自定义的jwt授权
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions">
            <summary>
            Authentication扩展程序
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthenticationSetup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加Authentication
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddIds4Authentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加IdentityServer4认证 
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加jwt的授权认证方案
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AuthenticationFailed(Microsoft.AspNetCore.Authentication.JwtBearer.AuthenticationFailedContext)">
            <summary>
            认证失败时
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.TokenValidated(Microsoft.AspNetCore.Authentication.JwtBearer.TokenValidatedContext)">
            <summary>
            验证token时的事件
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions">
            <summary>
            权限启动服务注册
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthoriationSetup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加权限
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
